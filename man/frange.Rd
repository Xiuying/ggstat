% Generated by roxygen2 (4.0.2): do not edit by hand
\name{frange}
\alias{frange}
\title{Fast implementation of range.}
\usage{
frange(x, finite = TRUE)
}
\arguments{
\item{x}{A numeric vector, or an S3 object built on top of integer and
double atomic vectors, as long as there is a method for
\code{\link{restore}()}.}

\item{finite}{If \code{TRUE} ignores missing values and infinities. Note
that if the vector is empty, or only contains missing values,
\code{frange} will return \code{c(Inf, -Inf)} because those are the
identity values for \code{\link{min}} and \code{\link{max}} respectively.}
}
\value{
A numeric vector of length two. If \code{x} contains no non-missing
  values, this will be \code{c(Inf, -Inf)}.
}
\description{
This is an efficient C++ implementation of range for numeric vectors:
it avoids S3 dispatch, and computes both min and max in a single pass
through the input.
}
\examples{
# frange() always ignores missing values
frange(c(1:10, NA))

# frange() works with dates and times
frange(Sys.Date())
frange(Sys.time())

# frange() is much faster than range()
x <- runif(1e6)
system.time(range(x))
system.time(frange(x))
}

